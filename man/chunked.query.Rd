% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chunked.query.R
\name{chunked.query}
\alias{chunked.query}
\title{A function to pull a large data table from SQL Server to R in chunks,
as RJDBC has problems pulling very large tables using the standard
dbGetQuery(...) approach. This function splits the table up into logical
chunks that are pulled one at a time.  The specific technique for splitting
up the calls using OFFSET ... ROWS FETCH NEXT ... ROWS ONLY may or may not
be portable to other SQL dialects, I don't know.}
\usage{
chunked.query(cn, table.name, order.by.clause, max.n.rows = 2e+06)
}
\arguments{
\item{cn}{The database connection to use for the queries.}

\item{table.name}{You need to have the data that you want to pull in a single table (or view, UDF, etc.).
This parameter is the name of the table that will be used in the SQL queries.}

\item{order.by.clause}{The ORDER BY clause that will be used to determine the order in which
rows are fetched.  This MUST contain a column or combination of columns that are guaranteed have
unique values for every row, or the behavior of the FETCH operation may not be predictable.}

\item{max.n.rows}{The maximum number of rows to pull per chunk}
}
\description{
A function to pull a large data table from SQL Server to R in chunks,
as RJDBC has problems pulling very large tables using the standard
dbGetQuery(...) approach. This function splits the table up into logical
chunks that are pulled one at a time.  The specific technique for splitting
up the calls using OFFSET ... ROWS FETCH NEXT ... ROWS ONLY may or may not
be portable to other SQL dialects, I don't know.
}
\keyword{sql}
