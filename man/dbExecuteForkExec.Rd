% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbExecuteForkExec.R
\name{dbExecuteForkExec}
\alias{dbExecuteForkExec}
\title{A function that uses the parallel package to execute a SQL statement in a subprocess.  If async=FALSE, it 
returns the number of rows affected if the statement was successfully executed, or errors if not.  If async=TRUE,
it asyncronously returns an object of the class parallelJob that can be used to determine job status via parallel::mccollect.}
\usage{
dbExecuteForkExec(dbConnectionFun, dbConnectionArgs, statement,
  async = FALSE)
}
\arguments{
\item{dbConnectionFun}{The function to be called to instantiate a database connection}

\item{dbConnectionArgs}{The values of the parameters (in a named list) to be passed to dbConnectionFun to instantiate a connection}

\item{statement}{The SQL statement to be executed}

\item{async}{If FALSE, the function blocks, waiting for the subprocess to complete. If TRUE, the 
function asyncronously returns an object of the class parallelJob that can be used to determine job status via parallel::mccollect}
}
\description{
A function that uses the parallel package to execute a SQL statement in a subprocess.  If async=FALSE, it 
returns the number of rows affected if the statement was successfully executed, or errors if not.  If async=TRUE,
it asyncronously returns an object of the class parallelJob that can be used to determine job status via parallel::mccollect.
}
\keyword{sql}
